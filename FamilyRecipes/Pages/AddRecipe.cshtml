@page
@using FamilyRecipes.Models;
@model FamilyRecipes.Pages.AddRecipeModel
@{

    ViewData["Title"] = "Add recipe";
    List<Models.Unit> units = Model.Units.ToList();
    List<string> distinctMainCategories = Model.DistinctMainCategories;
    string addTitle = Model.AddTitle;
    Category AddCategory = Model.AddCategory;
    string addMainCategory = Model.AddMainCategory;
    string addSubCategory = Model.AddSubCategory;
    int addTimeRequired = Model.AddTimeRequired;
    int addServings = Model.AddServings;
    string addDescription = Model.AddDescription;
    List<string> addSteps = Model.AddSteps;
    List<string> allSteps = new List<string>();
    List<RecipeIngredient> addRecipeIngredients = Model.AddRecipeIngredients;
    List<RecipeIngredientMapSource> recipeIngredientsMapSource = Model.RecipeIngredientsMapSource;
    RecipeIngredient addOneIngredient = new RecipeIngredient();
    bool addAdultsOnly = Model.AddAdultsOnly;
    string addImage = Model.AddImage;

    string addRI_IngredientName = Model.AddRI_IngredientName;
    string addRI_UnitName = Model.AddRI_UnitName;
    int addRI_Amount = Model.AddRI_Amount;
}
<script>
    localStorage.setItem('counter', 0);
    localStorage.setItem('myIngredientName', '');
    localStorage.setItem('myUnitName', '');
    localStorage.setItem('myAmount', '');

    // clear ingredients when refreshing
    if (localStorage.getItem('ingredientList')) {
        localStorage.removeItem('ingredientList');
    }
</script>
<div class="scrollinside max80">
    <div class="text-center max80 checkered-tiles">
        <br />
        <div class="f-h1 t-neonpink">Add Recipe</div>
        <br />
        <div class="card1 card-color1 glass">
            <style scoped>
                input[type=text], textarea, select, input {
                    background-color: rgba(0,0,0,0.3);
                }

                button {
                    background-color: rgba(0,0,0,0.4);
                    border: solid 2px rgba(255,255,127,0.5);
                    color: rgba(255,255,127,0.7);
                    text-align: center;
                    padding: 5px 20px 10px 20px;
                    text-decoration: none;
                    margin-bottom: 20px;
                    cursor: pointer;
                }

                    button:active, button:hover, input[type=text]:active, input[type=text]:hover, textarea:active, textarea:hover, select:active, select:hover, input:active, input:hover {
                        background-color: rgba(0,0,0,0.7);
                        box-shadow: 3px 5px 5px rgba(0,0,0,0.8);
                        color: rgba(255,255,127,1);
                        cursor: pointer;
                    }

                    button:active, button:hover {
                        border: solid 2px rgba(255,255,127,0.7);
                    }

            </style>
            <form method="post" asp-page-handler="AddRecipe" enctype="multipart/form-data">
                <!-- Title -->
                <div>
                    <label class="card1-title" for="Title">Title</label><br />
                    <input class="card1-field" type="text" id="Title" name="AddTitle"
                           placeholder="Enter Title" value="A title.." asp-for="@addTitle" required />
                    <span asp-validation-for="@addTitle"></span>
                </div>
                <br />
                <!-- Main Category -->
                <div>
                    <hr class="hr1" />
                    <label asp-for="@addMainCategory" class="card1-title">Category</label><br />
                    <select asp-for="@addMainCategory" class="card1-field" id="changeMain" name="AddMainCategory" required>
                        <option value="">[Select Category]</option>
                        @foreach (var c in distinctMainCategories)
                        {
                            <option value="@c">@c</option>
                        }
                    </select>
                </div>
                <!-- Subcategory -->
                <div>
                    <label asp-for="@addSubCategory" class="card1-title">Subcategory</label><br />
                    <select asp-for="@addSubCategory" class="card1-field" id="addSubCategory" name="AddSubCategory" required>
                        <option value="">[Select Subcategory]</option>
                    </select>
                </div>
                <br />
                <br />
                <hr class="hr1" />
                <!-- Time Required -->
                <div>
                    <label class="card1-title" for="addTimeRequired">Time Required (minutes)</label><br />
                    <input type="number" class="card1-field" id="addTimeRequired" name="addTimeRequired"
                           placeholder="45" value="45" asp-for="@addTimeRequired" required />
                    <span asp-validation-for="@addTimeRequired"></span>
                </div>
                <!-- Servings -->
                <div>
                    <label class="card1-title" for="addServings">Number of Servings</label><br />
                    <input type="number" class="card1-field" id="addServings" name="addServings" value="4"
                           asp-for="@addServings" />
                    <span asp-validation-for="@addServings"></span>
                </div>
                <br />
                <hr class="hr1" />
                <!-- Description -->
                <div>
                    <label class="card1-title" for="addDescription">Description</label><br />
                    <textarea class="card1-field" id="addDescription" name="AddDescription"
                              placeholder="Add description" asp-for="@addDescription" required></textarea>
                    <span asp-validation-for="@addDescription"></span>
                </div>
                <!-- Adults Only -->
                <div>
                    <label class="card1-title" for="AdultsOnly">Adults Only</label>
                    <input type="checkbox" id="AdultsOnly" name="AddAdultsOnly" asp-for="@addAdultsOnly" />
                </div>
                <hr class="hr1" />
                <!-- Image -->
                <div>
                    <label class="card1-title" for="Image">Add Image</label><br />
                    <input class="card1-field" type="text" id="Image" name="AddImage"
                           placeholder="Image-url (for now)" value="testimage.png" asp-for="@addImage"></input>
                    <span asp-validation-for="@addImage"></span>
                </div>
                <br />
                <hr class="hr1" />

                <!-- Add Recipe Ingredients -->
                <div>
                    <div class="card1-title">Add Recipe Ingredients</div>
                    <!-- Select Ingredient Type -->
                    <div class="card1-title">Ingredient Type</div>
                    <select class="card1-field" id="changeRIType" required>
                        <option value="">[Select Type]</option>
                        @foreach (var t in Model.IngredientTypes)
                        {
                            <option value="@t">@t</option>
                        }
                    </select>

                    <!-- Select Ingredient -->
                    <div class="card1-title">Ingredient</div>
                    <select asp-for="@addRI_IngredientName" class="card1-field" id="addRIIngredientName" name="AddRI_IngredientName" required>
                        <option value="">[Select Ingredient]</option>
                    </select>

                    <!-- Select measure -->
                    <div class="card1-title">Select Measure</div>
                    <select asp-for="@addRI_UnitName" class="card1-field" id="addRIUnitName" name="AddRI_UnitName" required>
                        <option value="">[Select Measure]</option>
                    </select>
                    <!-- Amount  -->
                    <div>
                        <div class="card1-title">Amount</div>
                        <input type="number" class="card1-field" id="addRIAmount" name="addRI_Amount"
                               placeholder="Enter Amount" asp-for="@addRI_Amount" required />
                    </div>
                    <br />
                    <!-- saveIngredient -->
                     <button type="button" onclick="saveIngredient()">Save Ingredient</button>

                    <div id="currentingredients">
                    </div>
                    <span asp-validation-for="@addRecipeIngredients"></span>
                </div>
                <hr class="hr1" />
                <!-- Steps -->
                <div>
                    <label class="card1-title">Steps</label><br />
                    <div id="stepsList">
                        <input type="text" class="card1-field" name="AddSteps" value=""
                               placeholder="No numbering needed, just instructions" asp-for="@addSteps" required />
                    </div>
                    <br />
                    <button type="button" onclick="addInput('stepsList', 'AddSteps')">Add Step</button>
                    <br /><br />
                </div>
                <hr class="hr1" />
                <input type="hidden" id="ingredientList" name="ingredientList" />
                <!-- Save Recipe -->
                <br />
                <button type="submit">Save Recipe</button>
            </form>
        </div>
        <br />
    </div>
</div>

<script type="text/javascript">
    // On Submit Populate ingredientList
    document.querySelector('form').addEventListener('submit', function (event) {
        document.getElementById('ingredientList').value = localStorage.getItem('ingredientList');
    });

    // Get Subcategories
    document.getElementById("changeMain").onchange = async function handleChange(evt) {
        const value = evt.target.value;

        const response = await fetch('/AddRecipe?handler=GetSubcategories&mainCategory=' + encodeURIComponent(value));
        if (response.ok) {
            const subcategories = await response.json();

            const subCategoryDropdown = document.getElementById("addSubCategory");
            subCategoryDropdown.innerHTML = '<option value="">[Select Subcategory]</option>'; // Reset dropdown

            subcategories.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub;
                option.text = sub;
                subCategoryDropdown.appendChild(option);
            });
        } else {
            console.error("Failed to fetch subcategories");
        }
    };

    // Get Ingredients List
    document.getElementById("changeRIType").onchange = async function handleChange(evt) {
        const value = evt.target.value;
        localStorage.setItem('myIngredientName', '');
        localStorage.setItem('myUnitName', '');
        //localStorage.setItem('myAmount', '');
        const response = await fetch('/AddRecipe?handler=GetIngredientsByType&ingredientType=' + encodeURIComponent(value));
        if (response.ok) {
            const subcategories = await response.json();

            const subCategoryDropdown = document.getElementById("addRIIngredientName");
            subCategoryDropdown.innerHTML = '<option value="">[Select Ingredient]</option>'; // Reset dropdown
            document.getElementById("addRIUnitName").innerHTML = '<option value="">[Select Measure]</option>'; // Reset dropdown

            subcategories.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub;
                option.text = sub;
                subCategoryDropdown.appendChild(option);
            });
        } else {
            console.error("Failed to fetch ingredients");
        }
    };

    // UnitName Updater
    document.getElementById("addRIIngredientName").onchange = async function handleChange(evt) {
        const value = evt.target.value;
        localStorage.setItem('myIngredientName', value);
        localStorage.setItem('myUnitName', '');
        const response = await fetch('/AddRecipe?handler=GetUnitsByType&ingredientName=' + encodeURIComponent(value));
        if (response.ok) {
            const subcategories = await response.json();

            const subCategoryDropdown = document.getElementById("addRIUnitName");
            subCategoryDropdown.innerHTML = '<option value="">[Select Measure]</option>'; // Reset dropdown

            subcategories.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub;
                option.text = sub;
                subCategoryDropdown.appendChild(option);
            });
        } else {
            console.error("Failed to fetch ingredients");
        }
    };

    // Snoop UnitName
    document.getElementById("addRIUnitName").onchange = function handleChange(evt) {
        const value = evt.target.value;
        localStorage.setItem('myUnitName', value);
    };

    //Snoop Amount
    document.getElementById("addRIAmount").onchange = function handleChange(evt) {
        const value = evt.target.value;
        localStorage.setItem('myAmount', value);
    };

    // Save Recipe Ingredient
    function saveIngredient() {
        let localIngredientName = localStorage.getItem('myIngredientName');
        if (localIngredientName == "" || localIngredientName == null) { return; }
        let localUnitName = localStorage.getItem('myUnitName');
        if (localUnitName == "" || localUnitName == null) { return; }
        let localAmount = localStorage.getItem('myAmount');
        if (localAmount == "" || localAmount == null) { return; }
        let counter = Number(localStorage.getItem('counter'));
        counter = counter + 1;
        localStorage.setItem('counter', counter);

        //LocalStorage START
        const ingredientList = JSON.parse(localStorage.getItem('ingredientList')) || [];

        ingredientList.push({
            IngredientName: localIngredientName,
            UnitName: localUnitName,
            Amount: localAmount
        });
        localStorage.setItem('ingredientList', JSON.stringify(ingredientList));
        //LocalStorage END
        addingredienthtml(localIngredientName, localUnitName, localAmount);
    }
    // Add HTML
    function addingredienthtml(localIngredientName, localUnitName, localAmount) {

        let counter = Number(localStorage.getItem('counter'));
        counter = counter + 1;
        localStorage.setItem('counter', counter);

        // Get the container where rows will be added
        const container = document.getElementById("currentingredients");

        // Create a new div or span to hold the row (for better structure)
        const newRow = document.createElement("div"); // Or use a <span> if you prefer
        newRow.id = 'ingredient' + counter;

        // Create the first span for Amount and UnitName
        const amountUnitSpan = document.createElement("span");
        amountUnitSpan.className = "t-pinky textright"; // Add your classes
        amountUnitSpan.textContent = `${localAmount} ${localUnitName}`; // Set the text

        // Create the second span for IngredientName
        const ingredientSpan = document.createElement("span");
        ingredientSpan.className = "t-gld"; // Add your classes
        ingredientSpan.textContent = ' - ' + localIngredientName; // Set the text

        // Append both spans to the new row
        newRow.appendChild(amountUnitSpan);
        newRow.appendChild(ingredientSpan);

        // Append the new row to the container
        container.appendChild(newRow);
    }
    function addInput(id, name) {
        const container = document.getElementById(id);
        const input = document.createElement('input');
        input.type = 'text';
        input.name = name; // Maintain consistent name for binding
        input.className = 'card1-field fieldspacer'
        container.appendChild(input);
    }
</script>
