@page
@using FamilyRecipes.Models;
@model FamilyRecipes.Pages.AddRecipeModel
@{

    ViewData["Title"] = "Home page";
    List<Models.Unit> units = Model.Units.ToList();
    List<string> distinctMainCategories = Model.DistinctMainCategories;
    //List<Category> AllCategories = Model.Categories.ToList();

    string addTitle = Model.AddTitle;
    Category AddCategory = Model.AddCategory;
    string addMainCategory = Model.AddMainCategory;
    string addSubCategory = Model.AddSubCategory;
    int addTimeRequired = Model.AddTimeRequired;
    int addServings = Model.AddServings;
    string addDescription = Model.AddDescription;
    List<string> addSteps = Model.AddSteps;
    List<string> allSteps = new List<string>();
    List<RecipeIngredient> addRecipeIngredients = Model.AddRecipeIngredients;
    List<RecipeIngredientMapSource> recipeIngredientsMapSource = Model.RecipeIngredientsMapSource;
    RecipeIngredient addOneIngredient = new RecipeIngredient();
    bool addAdultsOnly = Model.AddAdultsOnly;
    string addImage = Model.AddImage;

    string addRI_IngredientName = Model.AddRI_IngredientName;
    string addRI_UnitName = Model.AddRI_UnitName;
    int addRI_Amount = Model.AddRI_Amount;

    // Variables for later feature "Add Ingredient"
    // string addI_IngredientName = Model.AddI_IngredientName;
    // string addI_Description = Model.AddI_Description;
    // string addI_Type = Model.AddI_Type;
    // int addI_Calories = Model.AddI_Calories;
}
<script>
    localStorage.setItem('counter', 0);
    //let mapSource = []; // No unexpected data
    localStorage.setItem('myIngredientName', '');
    localStorage.setItem('myUnitName', '');
    localStorage.setItem('myAmount', '');

    if (localStorage.getItem('ingredientList')) {
        localStorage.removeItem('ingredientList');
    }

</script>
<div class="scrollinside max80">
    <div class="text-center max80 checkered-tiles">
        <br />
        <div class="f-h1 t-neonpink">Add Recipe</div>
        <br />
        <div class="card1 card-color1 glass">
            <style scoped>
                input[type=text], textarea, select, input {
                    background-color: rgba(0,0,0,0.3);
                }

                button {
                    background-color: rgba(0,0,0,0.4);
                    border: solid 2px rgba(255,255,127,0.5);
                    color: rgba(255,255,127,0.7);
                    text-align: center;
                    padding: 5px 20px 10px 20px;
                    text-decoration: none;
                    margin-bottom: 20px;
                    cursor: pointer;
                }

                    button:active, button:hover, input[type=text]:active, input[type=text]:hover, textarea:active, textarea:hover, select:active, select:hover, input:active, input:hover {
                        background-color: rgba(0,0,0,0.7);
                        box-shadow: 3px 5px 5px rgba(0,0,0,0.8);
                        color: rgba(255,255,127,1);
                        cursor: pointer;
                    }

                    button:active, button:hover {
                        border: solid 2px rgba(255,255,127,0.7);
                    }

            </style>
            <form method="post" asp-page-handler="AddRecipe" enctype="multipart/form-data">
                <!-- Title -->
                <div>
                    <label class="card1-title" for="Title">Title</label><br />
                    <input class="card1-field" type="text" id="Title" name="AddTitle"
                           placeholder="Enter Title" value="A title.." asp-for="@addTitle" required />
                    <span asp-validation-for="@addTitle"></span>
                </div>
                <br />
                <!-- Main Category -->
                <div>
                    <hr class="hr1" />
                    <label asp-for="@addMainCategory" class="card1-title">Category</label><br />
                    <select asp-for="@addMainCategory" class="card1-field" id="changeMain" name="AddMainCategory" required>
                        <option value="">[Select Category]</option>
                        @foreach (var c in distinctMainCategories)
                        {
                            <option value="@c">@c</option>
                        }
                    </select>
                </div>
                <!-- Subcategory -->
                <div>
                    <label asp-for="@addSubCategory" class="card1-title">Subcategory</label><br />
                    <select asp-for="@addSubCategory" class="card1-field" id="addSubCategory" name="AddSubCategory" required>
                        <option value="">[Select Subcategory]</option>
                    </select>
                </div>
                <!-- AJAX SubCategory Updater -->
                <script>
                    document.getElementById("changeMain").onchange = async function handleChange(evt) {
                        const value = evt.target.value;

                        const response = await fetch('/AddRecipe?handler=GetSubcategories&mainCategory=' + encodeURIComponent(value));
                        if (response.ok) {
                            const subcategories = await response.json();

                            const subCategoryDropdown = document.getElementById("addSubCategory");
                            subCategoryDropdown.innerHTML = '<option value="">[Select Subcategory]</option>'; // Reset dropdown

                            subcategories.forEach(sub => {
                                const option = document.createElement("option");
                                option.value = sub;
                                option.text = sub;
                                subCategoryDropdown.appendChild(option);
                            });
                        } else {
                            console.error("Failed to fetch subcategories");
                        }
                    };
                </script>
                <br />
                <br />
                <hr class="hr1" />
                <!-- Time Required -->
                <div>
                    <label class="card1-title" for="addTimeRequired">Time Required (minutes)</label><br />
                    <input type="number" class="card1-field" id="addTimeRequired" name="addTimeRequired"
                           placeholder="45" value="45" asp-for="@addTimeRequired" required />
                    <span asp-validation-for="@addTimeRequired"></span>
                </div>
                <!-- Servings -->
                <div>
                    <label class="card1-title" for="addServings">Number of Servings</label><br />
                    <input type="number" class="card1-field" id="addServings" name="addServings" value="4"
                           asp-for="@addServings" />
                    <span asp-validation-for="@addServings"></span>
                </div>
                <br />
                <hr class="hr1" />
                <!-- Description -->
                <div>
                    <label class="card1-title" for="addDescription">Description</label><br />
                    <textarea class="card1-field" id="addDescription" name="AddDescription"
                              placeholder="Add description" asp-for="@addDescription" required></textarea>
                    <span asp-validation-for="@addDescription"></span>
                </div>
                <!-- Adults Only -->
                <div>
                    <label class="card1-title" for="AdultsOnly">Adults Only</label>
                    <input type="checkbox" id="AdultsOnly" name="AddAdultsOnly" asp-for="@addAdultsOnly" />
                </div>
                <hr class="hr1" />
                <!-- Image -->
                <div>
                    <label class="card1-title" for="Image">Add Image</label><br />
                    <input class="card1-field" type="text" id="Image" name="AddImage"
                           placeholder="Image-url (for now)" value="testimage.png" asp-for="@addImage"></input>
                    <span asp-validation-for="@addImage"></span>
                </div>
                <br />
                <hr class="hr1" />

                <!-- Add Recipe Ingredients -->
                <div>
                    <div class="card1-title">Add Recipe Ingredients</div>
                    <!-- Select Ingredient Type -->
                    <div class="card1-title">Ingredient Type</div>
                    <select class="card1-field" id="changeRIType" required>
                        <option value="">[Select Type]</option>
                        @foreach (var t in Model.IngredientTypes)
                        {
                            <option value="@t">@t</option>
                        }
                    </select>

                    <!-- Select Ingredient -->
                    <div class="card1-title">Ingredient</div>
                    <select asp-for="@addRI_IngredientName" class="card1-field" id="addRIIngredientName" name="AddRI_IngredientName" required>
                        <option value="">[Select Ingredient]</option>
                    </select>

                    <!-- AJAX GetIngredientsByType -->
                    <script>
                        document.getElementById("changeRIType").onchange = async function handleChange(evt) {
                            const value = evt.target.value;
                            localStorage.setItem('myIngredientName', '');
                            localStorage.setItem('myUnitName', '');
                            //localStorage.setItem('myAmount', '');
                            const response = await fetch('/AddRecipe?handler=GetIngredientsByType&ingredientType=' + encodeURIComponent(value));
                            if (response.ok) {
                                const subcategories = await response.json();

                                const subCategoryDropdown = document.getElementById("addRIIngredientName");
                                subCategoryDropdown.innerHTML = '<option value="">[Select Ingredient]</option>'; // Reset dropdown

                                subcategories.forEach(sub => {
                                    const option = document.createElement("option");
                                    option.value = sub;
                                    option.text = sub;
                                    subCategoryDropdown.appendChild(option);
                                });
                            } else {
                                console.error("Failed to fetch ingredients");
                            }
                        };
                    </script>

                    <!-- Select measure -->
                    <div class="card1-title">Select Measure</div>
                    <select asp-for="@addRI_UnitName" class="card1-field" id="addRIUnitName" name="AddRI_UnitName" required>
                        <option value="">[Select Measure]</option>
                    </select>

                    <!-- AJAX AddRIUnitName Updater -->
                    <script>
                        document.getElementById("addRIIngredientName").onchange = async function handleChange(evt) {
                            const value = evt.target.value;
                            localStorage.setItem('myIngredientName', value);
                            localStorage.setItem('myUnitName', '');
                            //localStorage.setItem('myAmount', '');
                            const response = await fetch('/AddRecipe?handler=GetUnitsByType&ingredientName=' + encodeURIComponent(value));
                            if (response.ok) {
                                const subcategories = await response.json();

                                const subCategoryDropdown = document.getElementById("addRIUnitName");
                                subCategoryDropdown.innerHTML = '<option value="">[Select Measure]</option>'; // Reset dropdown

                                subcategories.forEach(sub => {
                                    const option = document.createElement("option");
                                    option.value = sub;
                                    option.text = sub;
                                    subCategoryDropdown.appendChild(option);
                                });
                            } else {
                                console.error("Failed to fetch ingredients");
                            }
                        };
                    </script>
                    <!-- Snoop UnitName -->
                    <script>
                        document.getElementById("addRIUnitName").onchange = function handleChange(evt) {
                            const value = evt.target.value;
                            localStorage.setItem('myUnitName', value);
                        };
                    </script>
                    <!-- Amount : TODO Can this value be set from different javascript properly ie UnitName -->
                    <div>
                        <div class="card1-title">Amount</div>
                        <input type="number" class="card1-field" id="addRIAmount" name="addRI_Amount"
                               placeholder="Enter Amount" asp-for="@addRI_Amount" required />
                    </div>
                    <!-- Snoop Amount -->
                    <script>
                        document.getElementById("addRIAmount").onchange = function handleChange(evt) {
                            const value = evt.target.value;
                            localStorage.setItem('myAmount', value);
                        };
                    </script>

                    <br />
                    <!-- FUNCTION saveIngredient should get fields data,
                        send to backend to build RecipeIngredient,
                        show up on list of ingredients,
                        clear fields of inputs for RecipeIngredient
                        (ready for new input, if needed send empty data as hidden with form)
                    -->
                    <button type="button" onclick="saveIngredient()">Save Ingredient</button>

                    <div id="currentingredients">
                    </div>
                    <!-- Save Recipe Ingredient -->
                    <script type="text/javascript">
                        function saveIngredient() {
                            let localIngredientName = localStorage.getItem('myIngredientName');
                            if (localIngredientName == "" || localIngredientName == null) { return; }
                            let localUnitName = localStorage.getItem('myUnitName');
                            if (localUnitName == "" || localUnitName == null) { return; }
                            let localAmount = localStorage.getItem('myAmount');
                            if (localAmount == "" || localAmount == null) { return; }
                            let counter = Number(localStorage.getItem('counter'));
                            counter = counter + 1;
                            localStorage.setItem('counter', counter);

                            //LocalStorage START
                            const ingredientList = JSON.parse(localStorage.getItem('ingredientList')) || [];

                            ingredientList.push({
                                IngredientName: localIngredientName,
                                UnitName: localUnitName,
                                Amount: localAmount
                            });
                            localStorage.setItem('ingredientList', JSON.stringify(ingredientList));
                            //LocalStorage END
                            addingredienthtml(localIngredientName, localUnitName, localAmount);
                        }
                        // Add HTML
                        function addingredienthtml(localIngredientName, localUnitName, localAmount) {

                            // TODO:
                            // Clear document.getElementById("currentingredients");
                            // Parse entire ingredientList from localStorage
                            // foreach ingredient, add row to currentingredients-section

                            let counter = Number(localStorage.getItem('counter'));
                            counter = counter + 1;
                            localStorage.setItem('counter', counter);

                            // Get the container where rows will be added
                            const container = document.getElementById("currentingredients");

                            // Create a new div or span to hold the row (for better structure)
                            const newRow = document.createElement("div"); // Or use a <span> if you prefer
                            newRow.id = 'ingredient' + counter;

                            // Create the first span for Amount and UnitName
                            const amountUnitSpan = document.createElement("span");
                            amountUnitSpan.className = "t-pinky textright"; // Add your classes
                            amountUnitSpan.textContent = `${localAmount} ${localUnitName}`; // Set the text

                            // Create the second span for IngredientName
                            const ingredientSpan = document.createElement("span");
                            ingredientSpan.className = "t-gld"; // Add your classes
                            ingredientSpan.textContent = ' - ' + localIngredientName; // Set the text

                            // Remove-link
                            // const removeLink = document.createElement("a");
                            // removeLink.href = "#"; // Prevent default navigation
                            // removeLink.textContent = " Remove";
                            // removeLink.className = "remove-link"; // Optional class for styling
                            // removeLink.style.marginLeft = "10px"; // Optional: Add some spacing
                            // removeLink.onclick = function (e) {
                            //     e.preventDefault(); // Prevent the default action of the link
                            //     container.removeChild(newRow); // Remove the current row
                            //     console.log(`${localIngredientName} removed`);
                            //     // run secondary script
                            //     removeIngredient(localIngredientName);
                            //     // heyman('hola amigo');
                            // };


                            // Append both spans to the new row
                            newRow.appendChild(amountUnitSpan);
                            newRow.appendChild(ingredientSpan);
                            //newRow.appendChild(removeLink);

                            // Append the new row to the container
                            container.appendChild(newRow);
                        }
                    </script>
                    <span asp-validation-for="@addRecipeIngredients"></span>
                </div>
                <hr class="hr1" />
                <!-- Steps -->
                <div>
                    <label class="card1-title">Steps</label><br />
                    <div id="stepsList">
                        <input type="text" class="card1-field" name="AddSteps" value=""
                               placeholder="No numbering needed, just instructions" asp-for="@addSteps" required />
                    </div>
                    <br />
                    <button type="button" onclick="addInput('stepsList', 'AddSteps')">Add Step</button>

                    <script>
                        function addInput(id, name) {
                            const container = document.getElementById(id);
                            const input = document.createElement('input');
                            input.type = 'text';
                            input.name = name; // Maintain consistent name for binding
                            input.className = 'card1-field fieldspacer'
                            container.appendChild(input);
                        }
                    </script>
                    <br /><br />
                </div>
                <hr class="hr1" />
                <input type="hidden" id="ingredientList" name="ingredientList" />
                <!-- Save Recipe -->
                <br />
                <button type="submit">Save Recipe</button>

                <!-- On Submit Populate ingredientList -->
                <script>
                    document.querySelector('form').addEventListener('submit', function (event) {
                        document.getElementById('ingredientList').value = localStorage.getItem('ingredientList');
                    });
                </script>

                <!-- makeIngredientList
                <script>
                async function makeIngredientList() {
                // const ingredientList = JSON.parse(localStorage.getItem('ingredientList'))
                // // JSON-serializer
                const Ingredients = JSON.parse(localStorage.getItem('ingredientList')) || [];
                console.log(JSON.stringify({ Ingredients }));

                try {
                const response = await fetch('/AddRecipe?handler=AddRecipeIngredientList', {
                method: 'POST',
                headers: {
                'Content-Type': 'application/json'
                },
                body: JSON.stringify({ Ingredients })
                });

                if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
                }

                const data = await response.json();
                console.log(data);

                // Code to insert HTML or handle success goes here

                } catch (error) {
                console.error("Failed to fetch recipe ingredients:", error);
                }
                }
                function testVar(var1, var2) {
                console.log('addTitle: ' + var1);
                console.log('AddTitle: ' + var2);
                }
                // Remove Recipe Ingredient
                function removeIngredient(ingredientName) {
                console.log(`Removing ${ingredientName} from the list.`);
                var recipeIngredientsMapSource = @Html.Raw(Json.Serialize(recipeIngredientsMapSource));
                recipeIngredientsMapSource = recipeIngredientsMapSource.filter(
                item => item.IngredientName !== ingredientName
                );

                // console.log("After Removed:", ingredientList);
                }
                function heyman(heeey) {
                alert(heeey);
                }
                </script>
                 -->
                <!-- // Unresolved issues with pre-populated list that gets overwritten
                // Directly from form when running the script
                // ----------------------------------------------------------------
                // async function saveIngredient() {
                //     console.log("---------------------------------------");
                //     let mapSource = @Html.Raw(Json.Serialize(Model.RecipeIngredientsMapSource));
                //     console.log("Initial mapSource:", mapSource);
                //     let localIngredientName = localStorage.getItem('myIngredientName');
                //     let localUnitName = localStorage.getItem('myUnitName');
                //     let localAmount = localStorage.getItem('myAmount');
                //     console.log("Get mapsource list:", mapSource);
                //     const recipeIngredient = {
                //         IngredientName: localIngredientName,
                //         UnitName: localUnitName,
                //         Amount: localAmount,
                //     };
                //     // Add to the recipeIngredients list
                //     mapSource.push(recipeIngredient);
                //     console.log("Pushed to new list:", mapSource);
                //     //Update backend
                //     await fetch('/AddRecipe?handler=UpdateIngredients', {
                //         method: 'POST',
                //         headers: { 'Content-Type': 'application/json' },
                //         body: JSON.stringify({ ingredients: mapSource })
                //     })
                //         .then(response => {
                //             if (!response.ok) {
                //                 throw new Error("HTTP error " + response.status);
                //             }
                //             return response.json();
                //         })
                //         .then(data => {
                //             if (data.success) {
                //                 console.log("Server response:", data);
                //                 console.log("Server data ingredients:", data.ingredients);
                //                 // Update the frontend list with the returned data
                //                 mapSource = data.ingredients;
                //                 console.log("Updated from data:", mapSource);
                //                 // Clear and re-render the list
                //                 const ingredientContainer = document.getElementById("currentingredients");
                //                 ingredientContainer.innerHTML = ""; // Clear the existing content
                //                 mapSource.forEach(item => {
                //                     addingredienthtml(item.IngredientName, item.UnitName, item.Amount);
                //                     console.log("Fetched item:", item);
                //                     console.log("Fetched item.IngredientName:", item.IngredientName);
                //                     console.log("Fetched item.UnitName:", item.UnitName);
                //                     console.log("Fetched item.Amount:", item.Amount);
                //                 });
                //             } else {
                //                 console.error("Error updating ingredients:", data.message);
                //             }
                //         })
                //         .catch(error => console.error("Error during update:", error));
                //     let freshMapSource = @Html.Raw(Json.Serialize(Model.RecipeIngredientsMapSource));
                //     console.log("After fetch:", freshMapSource);
                //     // Add HTML
                //     //addingredienthtml(localIngredientName, localUnitName, localAmount);
                // } -->
                <!-- Alternative saveIngredient-function with ajax
                <script type="text/javascript">
                // async function saveIngredient() {
                // let localIngredientName = localStorage.getItem('myIngredientName');
                // let localUnitName = localStorage.getItem('myUnitName');
                // let localAmount = localStorage.getItem('myAmount');

                // // JSON-serializer
                // const ingredientList = JSON.parse(localStorage.getItem('ingredientList')) || [];

                // ingredientList.push({
                // IngredientName: localIngredientName,
                // UnitName: localUnitName,
                // Amount: localAmount
                // });

                // localStorage.setItem('ingredientList', JSON.stringify(ingredientList));

                // try {
                // const response = await fetch('/AddRecipe?handler=AddRecipeIngredient', {
                // method: 'POST',
                // headers: {
                // 'Content-Type': 'application/json'
                // },
                // body: JSON.stringify({ ingredientList })
                // });

                // if (!response.ok) {
                // throw new Error(`HTTP error! status: ${response.status}`);
                // }

                // const data = await response.json();
                // console.log(data);

                // // Code to insert HTML or handle success goes here
                // } catch (error) {
                // console.error("Failed to fetch recipe ingredients:", error);
                // }
                // }
                </script> -->
                <!-- Div - Add New Ingredient
                <div class="hidden" id="addnewingredient">
                    <hr class="hr1" />
                    <div class="card1-title">Add New Ingredient</div><br />
                    <label class="card1-title" for="newingredient">Name</label><br />
                    <input class="card1-field" type="text" id="newingredient" name="AddRecipeIngredients"
                           value="Ingredient" asp-for="@addRecipeIngredients"></input>
                    <span asp-validation-for="@addRecipeIngredients"></span>

                    <br /><br />
                    <hr class="hr1" />
                </div> -->
                <!-- AJAX AddNewIngredient Updater
                <script>
                document.getElementById("-id-").onchange = async function handleChange(evt) {
                const value = evt.target.value;

                const response = await fetch('/AddRecipe?handler=GetSubcategories&mainCategory=' + encodeURIComponent(value));
                if (response.ok) {
                const subcategories = await response.json();

                const subCategoryDropdown = document.getElementById("addSubCategory");
                subCategoryDropdown.innerHTML = '<option value="">[Select Subcategory]</option>'; // Reset dropdown

                subcategories.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub;
                option.text = sub;
                subCategoryDropdown.appendChild(option);
                });
                } else {
                console.error("Failed to fetch ingredients");
                }
                };
                </script>
                 -->
            </form>
        </div>
        <br />
    </div>
</div>


