@page
@model FamilyRecipes.Pages.RecipesModel
@using FamilyRecipes.Models
@using FamilyRecipes
@{
    ViewData["Title"] = "Recipes";
    List<Unit> units = Model.Units;
    Recipe currentRecipe = Model.MyRecipe;
    List<Category> categories = Model.Categories;
    FamilyUser currentUser = new FamilyUser();
    currentUser = Model.CurrentUser;
    Recipe selectedRecipe = new Recipe();
    string mainCategory = "";
    string subCategory = "";
    string selectRecipe = "";
}
<script>
    localStorage.setItem('storedUser', @Html.Raw(Json.Serialize(currentUser)));
</script>
<div class="scrollinside max80">
    <style scoped>
        select option {
            background: rgba(0, 0, 0, 0.3) !important;
            color: rgb(246, 255, 124) !important;
        }

        button {
            background-color: rgba(57, 35, 90, 0.4);
            border: solid 2px rgba(255,255,127,0.5);
            color: rgba(255,255,127,0.7);
            text-align: center;
            padding: 5px 20px 10px 20px;
            text-decoration: none;
            margin-bottom: 20px;
            cursor: pointer;
        }

            button:active, button:hover {
                background-color: rgba(57, 35, 90, 0.7);
                box-shadow: 3px 5px 5px rgba(0,0,0,0.8);
                color: rgba(255,255,127,1);
                cursor: pointer;
                border: solid 2px rgba(255,255,127,0.7);
            }
    </style>
    <div class="text-center max80 recipe-bg scrollinside z100" id="recipe-bg">
        <!-- ------ SELECTOR MENU ------ -->
        <div class="d-flex flex-row justify-content-center">
            <div class="flex-column">
                <label asp-for="@mainCategory" class="recipes-drop-title">Category</label><br />
                <select asp-for="@mainCategory" class="recipes-drop-field" id="maincategory" name="MainCategory">
                    <option value="">[Select Category]</option>
                    @foreach (string c in categories.Select(c => c.MainCategory).Distinct().ToList())
                    {
                        <option value="@c">@c</option>
                    }
                </select>
            </div>
            &nbsp;&nbsp;&nbsp;
            <div class="flex-column">
                <label asp-for="@subCategory" class="recipes-drop-title">Subcategory</label><br />
                <select asp-for="@subCategory" class="recipes-drop-field" id="subcategory" name="SubCategory">
                    <option value="">[Select Subcategory]</option>
                </select>
            </div>

        </div>
        <br />
        <!-- ------ SELECTOR LIST ------ -->
        <div class="d-flex flex-row justify-content-center hider" id="recipelist">
            <div>
                <label asp-for="@selectRecipe" class="recipes-drop-title">Subcategory</label><br />
                <select class="recipes-field glass" name="Recipes" size="6" id="listbox">
                    <option class="recipes-field" value="">[Select Recipe]</option>
                </select>
                <br />
                <br />
                <br />
            </div>
        </div>
        <br />
        <!-- Show Recipe START -->
        <div class="d-flex flex-row justify-content-center hider" id="recipecontainer">
            <div class="recipecard recipecard-bg glass" id="showrecipe" tabindex="0" onKeyUp="showhide('recipelist')" onclick="showhide('recipelist')">
                <br />
                <div class="f-h2 t-goldy flex-row text-center" id="thisRecipeTitle"></div>
                <div class="f-h2 t-pinky flex-row text-center" id="thisRecipeUser"></div>
                <div class="t-gld flex-row text-center" id="thisRecipeDate"></div>
                <div class="t-gld flex-row text-center" id="thisRecipeCategory"></div>
                <br />
                <div class="t-gld flex-row text-center" id="thisRecipeDescription"></div>
                <div class="t-pinky flex-row text-center" id="thisRecipeAdult"></div>
                <br />
                <div class="text-start blockcenter">

                    <div class="flex-row text-center">
                        <span class="t-pinky ch10">Time: </span>
                        <span class="t-gld ch24" id="thisRecipeTime"></span>
                        <span>min</span>
                        <br />
                        <span class="t-pinky ch10">Servings: </span>
                        <span class="t-gld ch24" id="thisRecipeServings"></span>
                    </div>

                    <!-- Calories - Calories per serving -->
                    <div class="flex-row text-center">
                    <span class="t-pinky ch10 textright">Calories: </span>
                    <span class="t-gld ch24 textleft" id="thisRecipeTotalCalories"></span><span> kcal</span>
                    <br />
                    <span class="t-pinky ch10 textright">Each Serving: </span>
                    <span class="t-gld ch24 textleft" id="thisRecipeCalPerServing"></span><span> kcal</span>
                    </div>
                    <br />
                    <div class="t-gld text-center flex-row">Ingredients</div>
                    <div class="t-pinky flex-row" id="thisRecipeIngredients">
                    </div>
                    <br />
                    <div class="t-pinky text-center" id="thisRecipeSteps"></div>
                    <br />
                </div>
            </div>
            <br />
        </div>

        <div class="d-flex flex-row justify-content-center hider" id="printbutton"> <button id="print" onclick="printContent('showrecipe');">Print</button></div>
        <!-- Show Recipe END -->
        <div>
            <br />
            <br />
            <br />
            <br />
        </div>
    </div>
</div>
<div class="tagfield hider" id="tagfield"></div>
<script type="text/javascript">
    // Get Category - Make Subcategories List //
    document.getElementById("maincategory").onchange = async function handleChange(evt) {
        const value = evt.target.value;

        const response = await fetch('/Recipes?handler=GetSubcategories&mainCategory=' + encodeURIComponent(value));
        if (response.ok) {
            const subcategories = await response.json();

            const subCategoryDropdown = document.getElementById("subcategory");
            subCategoryDropdown.innerHTML = '<option value="">[Select Subcategory]</option>'; // Reset dropdown

            subcategories.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub;
                option.text = sub;
                subCategoryDropdown.appendChild(option);
            });
            hide('recipelist');
            hide('recipecontainer');
            hide('printbutton');
            hide('tagfield');
        } else {
            console.error("Failed to fetch subcategories");
        }
    };

    // Get Subcategory - Make Recipe List //
    document.getElementById("subcategory").onchange = async function handleChange(evt) {
        const value = evt.target.value;
        let wallpaperName = value.replace(/\s+/g, '').toLowerCase() + '.webp';
        const response = await fetch('/Recipes?handler=GetRecipes&subCategory=' + encodeURIComponent(value));
        if (response.ok) {
            const recipes = await response.json();
            document.getElementById("listbox").innerHTML = "";
            const recipeSelector = document.getElementById("listbox");
            // subcategory.innerHTML = '<option value="">[Select Recipe]</option>'; // Reset dropdown

            recipes.forEach(sub => {
                const option = document.createElement("option");
                option.value = sub;
                option.text = sub;
                recipeSelector.appendChild(option);
            });
            
        } else {
            console.error("Failed to fetch subcategories");
        }
        // set subcategory as tag on wallpaper
        const tagger = document.getElementById('tagfield');
        tagger.textContent = value;
        tagshow('tagfield');
        wallpapermod(wallpaperName);
        hide('recipecontainer');
        hide('printbutton');
        show('recipelist');
        
    };

    // Get Recipe - Send to html generator //
    document.getElementById("listbox").onchange = async function handleChange(evt) {
        const value = evt.target.value;
        let storedUser = localStorage.getItem('storedUser');
        //let wallpaperName = value.replace(/\s+/g, '').toLowerCase() + '.png';
        const response = await fetch('/Recipes?handler=GetSelectRecipe&selectRecipe=' + encodeURIComponent(value));
        if (response.ok) {
            const fetchedrecipe = await response.json();
            htmlgenerator(fetchedrecipe, print);
        } else {
            console.error("Failed to fetch subcategories");
        }
        show('recipecontainer');
        show('printbutton')
    };

    function htmlgenerator(fetchedrecipe) {
        document.getElementById("thisRecipeTitle").textContent = `${fetchedrecipe.Title}`;
        document.getElementById("thisRecipeUser").textContent = `by ${fetchedrecipe.UserName}`;
        var dateString = new Date(Date.parse(fetchedrecipe.CreatedDate)).toDateString();
        document.getElementById("thisRecipeDate").textContent = `${dateString}`;
        document.getElementById("thisRecipeCategory").textContent = `${fetchedrecipe.Category.SubCategory}`;
        document.getElementById("thisRecipeDescription").textContent = `${fetchedrecipe.Description}`;
        if (fetchedrecipe.AdultsOnly) { 
            document.getElementById("thisRecipeAdult").textContent = `This recipe is for adults only!`;
        }
        document.getElementById("thisRecipeTime").textContent = `${fetchedrecipe.TimeRequired}`;
        document.getElementById("thisRecipeServings").textContent = `${fetchedrecipe.Servings}`;
        var totalRecipeCalories = totalcaloriescounter(fetchedrecipe);
        document.getElementById("thisRecipeTotalCalories").textContent = `${totalRecipeCalories}`;
        var calPerServing = totalRecipeCalories / parseInt(fetchedrecipe.Servings);
        document.getElementById("thisRecipeCalPerServing").textContent = `${calPerServing}`;
        generateingredients(fetchedrecipe);
        generatesteps(fetchedrecipe);
    }

    function totalcaloriescounter(fetchedrecipe) {
        var countedCalories = 0;
        for (const part of fetchedrecipe.RecipeIngredients){
            countedCalories += parseInt(part.TotalCalories);
        }
        return countedCalories;
    }

    function generateingredients(fetchedrecipe) {
        const container = document.getElementById("thisRecipeIngredients");
        container.innerHTML = "";
        for (const ing of fetchedrecipe.RecipeIngredients) {
            var child = addingredient(ing.Ingredient.Name, ing.Unit.Short, ing.Amount);
            container.appendChild(child);
        }
    }

    function generatesteps(fetchedrecipe) {
        const container = document.getElementById("thisRecipeSteps");
        container.innerHTML = "";
        let counter = 1;
        for (const step of fetchedrecipe.Steps) {
            var childnumber = addstepnumber(counter);
            var childtext = addsteptext(step);
            container.appendChild(childnumber);
            container.appendChild(childtext);
            counter++;
        }
    }

    function addstepnumber(counter) {

        const newRow = document.createElement("div"); // Or use a <span> if you prefer
        newRow.className = "flex-row text-center";

        const stepnumber = document.createElement("span");
        stepnumber.className = "t-pinky f-h3 textright";
        stepnumber.textContent = `${counter}.`; // Set the text

        newRow.appendChild(stepnumber);

        return newRow;
    }

    function addsteptext(step) {

        const newRow = document.createElement("div"); // Or use a <span> if you prefer
        newRow.className = "flex-row text-center stepspacer";

        const steptext = document.createElement("span");
        steptext.className = "t-gld textright"; 
        steptext.textContent = `${step}`; // Set the text

        const breakline = document.createElement("br");
        newRow.appendChild(steptext);

        // Return row
        return newRow;
    }

    function addingredient(localIngredientName, localUnitName, localAmount) {

        const newRow = document.createElement("div"); // Or use a <span> if you prefer
        newRow.className = "text-center";

        // Create the first span for Amount and UnitName
        const amountUnitSpan = document.createElement("span");
        amountUnitSpan.className = "t-pinky textright";
        amountUnitSpan.textContent = `${localAmount} ${localUnitName}`; // Set the text

        // Create the second span for IngredientName
        const ingredientSpan = document.createElement("span");
        ingredientSpan.className = "t-gld";
        ingredientSpan.textContent = ` -  ${localIngredientName}`;

        // Append both spans to the new row
        newRow.appendChild(amountUnitSpan);
        newRow.appendChild(ingredientSpan);

        // Return row
        return newRow;
    }

    // Wallpaper swapper //
    function wallpapermod(wallpaper) {
        document.getElementById("recipe-bg").style.backgroundImage = "url('../images/graphics/bg/" + wallpaper + "')";
    }

    // Show Hide //
    function show(id) {
        document.getElementById(id).style.display = "block";
        document.getElementById(id).style.visibility = "visible";
        document.getElementById(id).style.position = "relative";
    }
    function hide(id) {
        document.getElementById(id).style.display = "none";
        document.getElementById(id).style.visibility = "hidden";
        document.getElementById(id).style.position = "absolute";
    }

    function showhide(id) {
        if (document.getElementById(id).style.display == 'block') {
            hide(id);
        }
        else {
            show(id);
        }
    }

    function tagshow(id) {
        document.getElementById(id).style.display = "block";
        document.getElementById(id).style.visibility = "visible";
    }
    function resetmenus() {
        document.getElementById("maincategory").value = "";
        document.getElementById("subcategory").value = "";
        show('maincategory');
        show('subcategory');
        hide('printbutton');
        hide('tagfield');
    }

    function printContent(el) {
        var restorepage = $('body').html();
        var printcontent = $('#' + el).clone();
        $('body').empty().html(printcontent);
        window.print();
        $('body').html(restorepage);
    }
    window.onload = resetmenus();
</script>

